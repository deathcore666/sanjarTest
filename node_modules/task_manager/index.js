const config = require('config');
const _ = require('lodash');

const producer = require('./rd-kafka-producer');
const consumer = require('./rd-kafka-consumer');

let componentName = '';
let componentId = '';

let initCallback = null;
let errorCallback = null;

let updateTopic = null;
let startTopic = null;

let tasksMap = new Map();
exports.tasksQueue = [];

exports.init = (initCB = null, errCB) => {
    if(initCB)
        initCallback = initCB;

    errorCallback = errCB;

    try {
        componentName = config.get('taskManager.componentName');
        componentId = config.get('taskManager.componentId');
        updateTopic = config.get('taskManager.kafka.updateTopic');
        startTopic = config.get('taskManager.kafka.startTopic');

    } catch (err) {
        let error = new Error('Error loading configs: ' + err);
        error.code = -1;
        initCallback(error);
    }

    producer.init(onProducerInit, errorCallback);
};

const onProducerInit = (err) => {
    if (err) {
        initCallback(err)
    } else {
        consumer.init(onConsumerInit, listenTasks, errorCallback)
    }
};

const onConsumerInit = (err) => {
    if (err) {
        initCallback(err);
    } else {
        initCallback(null);
    }
};

const listenTasks = (msg) => {
    if (!_.isPlainObject(msg.value.toString()))
        return;

    let task = JSON.parse(msg.value.toString());
    let currComponent = task.componentName;
    let currComponentId = task.componentId;
    if (componentName === currComponent && currComponentId === componentId) {
        tasksMap[task.task_id] = msg;
        exports.tasksQueue.push(task);
    }
};

exports.inProgress = (task_id) => {
    let updateMessage = {
        task_id: task_id,
        status: 'inProgress'
    };

    stream.consumer.commitMessage(tasksMap[task_id]);
    producer.send(updateTopic, JSON.stringify(updateMessage), task_id);
};

exports.cancelled = (task_id) => {
    let updateMessage = {
        task_id: task_id,
        status: 'cancelled'
    };

    stream.consumer.commitMessage(tasksMap[task_id]);
    producer.send(updateTopic, JSON.stringify(updateMessage), task_id);
};

exports.success = (task_id) => {
    let updateMessage = {
        task_id: task_id,
        status: 'success'
    };

    producer.send(updateTopic, JSON.stringify(updateMessage), task_id)
};

exports.fail = (task_id) => {
    let updateMessage = {
        task_id: task_id,
        status: 'fail'
    };

    producer.send(updateTopic, JSON.stringify(updateMessage), task_id)
};

exports.serviceStart = (service_id) => {
    let updateMessage = {
        task_id: service_id,
        status: 'up'
    };

    producer.send(startTopic, JSON.stringify(updateMessage))
};

exports.shutdown = () => {
    producer.shutdown();
    consumer.shutdown();
};
