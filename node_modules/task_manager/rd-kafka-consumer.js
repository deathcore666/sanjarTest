const Kafka = require('node-rdkafka');
const config = require('config');

let consumer = null;

let consumerConfigs = null;

let initCallback = null;
let messageCallback = null;
let errorCallback = null;

let stream;

exports.isReady = false;

exports.init = (initCB, msgCB, errCB) => {
    initCallback = initCB;
    errorCallback = errCB;

    if (config.has('taskManager.kafka')) {
        try {
            consumerConfigs = config.get('taskManager.kafka')
        } catch (err) {
            console.error('Error reading kafka configs: ', err);
            let error = new Error('Error reading kafka configs: ' + err);
            error.code = -1;
            initCallback(error);
            return;
        }
    } else {
        console.error('Kafka configs are missing from the configuration file!');
        let error = new Error('Kafka configs are missing from the configuration file!');
        error.code = -1;
        initCallback(error);
        return;
    }

    messageCallback = msgCB;
    connect();
};

exports.commitMessage = (msg) => {
    stream.consumer.commitMessage(msg);
};

const connect = () => {
    let globalOptions = {
        'group.id': consumerConfigs.consumerGroupId,
        'metadata.broker.list': consumerConfigs.brokersList,
        'enable.auto.commit': consumerConfigs.enableAutoCommit,
        'client.id': consumerConfigs.clientId,
        'socket.keepalive.enable': true,
    };

    let topicOptions = {
        'auto.offset.reset': 'earliest', // consume from the start
        'offset.store.path': '../offsets/'
    };

    stream = Kafka.KafkaConsumer.createReadStream(globalOptions, topicOptions, {
        topics: consumerConfigs.topics,
        waitInterval: 0,
    });

    initCallback(null);

    stream.on('data', onMessage);

    stream.on('error', onError);

    stream.consumer.on('event.error', onError)
};

const onMessage = (message) => {
    console.log(message);
    messageCallback(message);
};

const onError = (err) => {
    errorCallback('Consumer has encountered an error: ' + err);
};

exports.shutdown = () => {
    if (consumer != null) {
        consumer.disconnect();
    }
};

